{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":928025,"sourceType":"datasetVersion","datasetId":500970}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-05-06T11:11:06.330294Z","iopub.execute_input":"2024-05-06T11:11:06.330777Z","iopub.status.idle":"2024-05-06T11:11:07.509605Z","shell.execute_reply.started":"2024-05-06T11:11:06.330744Z","shell.execute_reply":"2024-05-06T11:11:07.508108Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"filename = \"/kaggle/input/urbansound8k/UrbanSound8K.csv\"\ndata = pd.read_csv(filename)\ndata.columns","metadata":{"execution":{"iopub.status.busy":"2024-05-06T11:13:29.140147Z","iopub.execute_input":"2024-05-06T11:13:29.140821Z","iopub.status.idle":"2024-05-06T11:13:29.195311Z","shell.execute_reply.started":"2024-05-06T11:13:29.140786Z","shell.execute_reply":"2024-05-06T11:13:29.193963Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"Index(['slice_file_name', 'fsID', 'start', 'end', 'salience', 'fold',\n       'classID', 'class'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-05-01T14:41:22.075226Z","iopub.execute_input":"2024-05-01T14:41:22.075663Z","iopub.status.idle":"2024-05-01T14:41:22.582471Z","shell.execute_reply.started":"2024-05-01T14:41:22.075630Z","shell.execute_reply":"2024-05-01T14:41:22.581166Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"8732"},"metadata":{}}]},{"cell_type":"code","source":"df = data.groupby('classID')\nprint(df.describe)","metadata":{"execution":{"iopub.status.busy":"2024-05-01T12:24:20.830003Z","iopub.execute_input":"2024-05-01T12:24:20.830395Z","iopub.status.idle":"2024-05-01T12:24:20.836176Z","shell.execute_reply.started":"2024-05-01T12:24:20.830368Z","shell.execute_reply":"2024-05-01T12:24:20.835066Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"<bound method GroupBy.describe of <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7cd439770490>>\n","output_type":"stream"}]},{"cell_type":"code","source":"classes = data.groupby('classID').size()\nclasses[0]\nimport matplotlib.pyplot as plt\n\nclasses.plot(kind = \"bar\")","metadata":{"execution":{"iopub.status.busy":"2024-05-06T11:13:49.787899Z","iopub.execute_input":"2024-05-06T11:13:49.788352Z","iopub.status.idle":"2024-05-06T11:13:50.187312Z","shell.execute_reply.started":"2024-05-06T11:13:49.788320Z","shell.execute_reply":"2024-05-06T11:13:50.185967Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='classID'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import os\ntotal_files = 0\nfor i in range(1,11):\n    total_files += len(os.listdir('/kaggle/input/urbansound8k/fold' + str(i)))\ntotal_files","metadata":{"execution":{"iopub.status.busy":"2024-05-06T11:14:03.565675Z","iopub.execute_input":"2024-05-06T11:14:03.566076Z","iopub.status.idle":"2024-05-06T11:14:06.670224Z","shell.execute_reply.started":"2024-05-06T11:14:03.566047Z","shell.execute_reply":"2024-05-06T11:14:06.668805Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"8732"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Creating the Database**","metadata":{}},{"cell_type":"code","source":"import librosa as lb\n# a,sr = lb.load('/kaggle/input/urbansound8k/fold1/101415-3-0-2.wav')\n# mfcc = lb.feature.mfcc(y = a)\n\ncnt=0\nX = []\nY = []\nfor index,row in data.iterrows():\n    filename = '/kaggle/input/urbansound8k/fold'+str(row['fold'])+'/'+row['slice_file_name']\n    a,sr = lb.load('/kaggle/input/urbansound8k/fold1/101415-3-0-2.wav')\n    X.append(lb.feature.mfcc(y = a,sr = sr))\n    Y.append(row['classID'])","metadata":{"execution":{"iopub.status.busy":"2024-05-06T11:14:11.753906Z","iopub.execute_input":"2024-05-06T11:14:11.754346Z","iopub.status.idle":"2024-05-06T11:18:50.762886Z","shell.execute_reply.started":"2024-05-06T11:14:11.754316Z","shell.execute_reply":"2024-05-06T11:18:50.761155Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"y = tf.keras.utils.to_categorical(train_labels, 10)\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n\nx_train = np.array(x_train, dtype=np.uint8).reshape(-1,img_rows,img_cols,3)\nx_test = np.array(x_test, dtype=np.uint8).reshape(-1,img_rows,img_cols,3)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y = np.array(Y)\nfrom sklearn.preprocessing import OneHotEncoder\nonehot_encoder = OneHotEncoder(sparse=False)\ny_onehot = onehot_encoder.fit_transform(y.reshape(-1, 1))","metadata":{"execution":{"iopub.status.busy":"2024-05-01T19:45:10.165212Z","iopub.execute_input":"2024-05-01T19:45:10.165689Z","iopub.status.idle":"2024-05-01T19:45:10.179495Z","shell.execute_reply.started":"2024-05-01T19:45:10.165653Z","shell.execute_reply":"2024-05-01T19:45:10.178424Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nimport keras\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nX_train, X_test, y_train, y_test = train_test_split(X, y_onehot, test_size=0.2, random_state=42)\n\n# Build a simple CNN\nmodel = keras.Sequential([\n    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),  # Convolutional layer\n    layers.MaxPooling2D((2, 2)),  # Max pooling layer\n    layers.Flatten(),  # Flatten to feed into dense layers\n    layers.Dense(64, activation='relu'),  # Dense layer\n    layers.Dense(y_onehot.shape[1], activation='softmax')  # Output layer with softmax activation\n])\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_cross-entropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))","metadata":{"_kg_hide-output":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-05-01T19:48:41.925934Z","iopub.execute_input":"2024-05-01T19:48:41.926353Z","iopub.status.idle":"2024-05-01T19:48:41.973407Z","shell.execute_reply.started":"2024-05-01T19:48:41.926323Z","shell.execute_reply":"2024-05-01T19:48:41.971950Z"},"trusted":true},"execution_count":14,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","Cell \u001b[0;32mIn[14], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mX_train\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mshape\u001b[49m\n","\u001b[0;31mAttributeError\u001b[0m: 'list' object has no attribute 'shape'"],"ename":"AttributeError","evalue":"'list' object has no attribute 'shape'","output_type":"error"}]},{"cell_type":"markdown","source":"# **Extracting feature using CNN**","metadata":{}},{"cell_type":"code","source":"img = lb.display.specshow(mfcc) ","metadata":{"execution":{"iopub.status.busy":"2024-05-01T12:01:44.860778Z","iopub.execute_input":"2024-05-01T12:01:44.861285Z","iopub.status.idle":"2024-05-01T12:01:44.964722Z","shell.execute_reply.started":"2024-05-01T12:01:44.861255Z","shell.execute_reply":"2024-05-01T12:01:44.963589Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}